vert.x Java Examples
====================

Prerequisites:

1) The bin directory from the distro must be on your PATH - this should have been done as part of the install procedure.

2) Apache ant must be installed and the ant bin directory must be on your PATH

3) JDK/JRE 1.7.0+ must be installed and the JDK/JRE bin directory must be on your PATH

1. Compile the java classes by invoking ant from this directory

2. Start a vertx instance:

vertx start

The instance will then listen on port 25571 for request to deploy / undeploy applications

If you want to start more than one vertx instance on the same machine you can specify different ports for them
to listen on, e.g.:

vertx start -port 22572
vertx start -port 22573

3. Deploy an example:

(for full help on deploying just type vertx deploy from the command line)

(from this directory)

vertx deploy -main <example class name> -cp classes

where <example class name> is, for example, org.vertx.java.examples.echo.EchoServer

For some examples it might make sense to run, say, the client and server in different vert.x instances. To
do this, just start multiple vert.x instances on different ports (see 2) above), and then specify the port when
deploying, e.g.:

vertx deploy -main <example class name> -cp classes -port <port>


There now follows a description of all the available examples:

Echo Server + Client
====================

A simple echo server which echos back any sent to it

To run the server:

vertx deploy -main org.vertx.java.examples.echo.EchoServer -cp classes

Then either telnet localhost 8080 and notice how text entered via telnet is echoed back

Instead of telnet you can also run a simple echo client:

vertx deploy -main org.vertx.java.examples.echo.EchoClient -cp classes

Fanout Server
=============

Fans out all data received on any one connection to all other connections.

To run the server:

vertx deploy -main org.vertx.java.examples.fanout.FanoutServer -cp classes

Then telnet localhost 8080 from different consoles. Note how data entered in telnet is echoed to all connected connections

HTTP
====

A simple HTTP server which just returns some hard-coded HTML to the client, and a simple HTTP client which sends a GET
request and displays the response it receives.

To run the server:

vertx deploy -main org.vertx.java.examples.http.ServerExample -cp classes

Then point your browser at http://localhost:8080

Alternatively, you can also run the HTTP client:

vertx deploy -main org.vertx.java.examples.http.ClientExample -cp classes

HTTPS
=====

Like the HTTP example, but using HTTPS

To run the server:

vertx deploy -main org.vertx.java.examples.https.ServerExample -cp classes

Then point your browser at http://localhost:4443

Alternatively, you can also run the HTTPS client:

vertx deploy -main org.vertx.java.examples.https.ClientExample -cp classes

You'll get a warning from your browser since the server certificate the server is using is not known to it, that's
normal.

Proxy
=====

A very simple HTTP proxy which simply proxies requests/response from a client to a server and back again.

It includes

a) A simple http server which just takes the request and sends back a response in 10 chunks

b) A simple http client which sends a http request with 10 chunks (via the proxy server), and displays any
response it receives

c) A proxy server which simply sits in the middle proxying requests and responses between client and server

To run (you probably want to do this with three vert.x instances running on different ports).

To run the http server:

vertx deploy -main org.vertx.java.examples.proxy.Server -cp classes

Run the proxy server:

vertx deploy -main org.vertx.java.examples.proxy.ProxyServer -cp classes

Run the http client:

vertx deploy -main org.vertx.java.examples.proxy.Client -cp classes

PubSub
======

A very simple publish-subscribe server.

Connections can subscribe to topics and unsubscribe from topics. Topics can be any arbitrary string.

When subscribed, connections will receive any messages published to any of the topics it is subscribed to.

The pub-sub server understands the following simple text protocol. Each line is terminated by CR (hit enter on telnet)

To subscribe to a topic:

SUBSCRIBE,<topic_name>

To unsubscribe from a topic:

UNSUBSCRIBE,<topic_name>

To publish a message to a topic:

PUBLISH,<topic_name>,<message>

Where:

<topic_name> is the name of a topic

<message is some string you want to publish

To run the server:

vertx deploy -main org.vertx.java.examples.pubsub.PubSubServer -cp classes

Then open some more consoles and telnet localhost 8080, and experiment with the protocol.

SendFile
========

Simple web server that uses sendfile to serve content directly from disk to the socket bypassing user space. This is a
very efficient way of serving static files from disk.

The example contains three static pages: index.html, page1.html and page2.html which are all served using sendfile.

To run the server:

vertx deploy -main org.vertx.java.examples.sendfile.SendFileExample -cp classes

Then point your browser at http://localhost:8080 and click around

SSL
===

This is like the echo example, but this time using SSL.

To run the server:

vertx deploy -main org.vertx.java.examples.ssl.SSLServer -cp classes

To run the client:

vertx deploy -main org.vertx.java.examples.ssl.SSLClient -cp classes

Upload
======

A simple upload server example. The client streams a file from disk to an HTTP request and the server reads the
HTTP request and streams the data to a file on disk.

To run the server:

vertx deploy -main org.vertx.java.examples.upload.UploadServer -cp classes

To run the client:

vertx deploy -main org.vertx.java.examples.upload.UploadClient -cp classes

Websockets
==========

A simple example demonstrating HTML 5 websockets. The example serves a simple page which has some JavaScript in it
to create a websocket to a server, and send and receive data from it.

To run the server:

vertx deploy -main org.vertx.java.examples.websockets.WebsocketsExample -cp classes

Then point your browser at: http://localhost:8080

Redis
=====

This example demonstrates a simple HTTP server which responds to HTTP requests to '/' with a page containing a hit counter.
The count is stored in a Redis Server and incremented each time using the Redis INCR command.

To run this example you must have a Redis server running on localhost.

The, to run the example:

vertx deploy -main org.vertx.java.examples.redis.RedisExample -cp classes

Then point your browser at: http://localhost:8080 and hit refresh a few times

Route Match
===========

This example shows how a route matcher can be used with a vert.x HTTP server to allow REST-style resource based matching of URIS
in the manner of express (JS) or Sinatra.

To run the example:

vertx deploy -main org.vertx.java.examples.routeMatch.RouteMatchExample -cp classes

Then point your browser at: http://localhost:8080.

An index page will be served which contains some links to urls of the form:

/details/<user>/<id>

The server will extract the user and id from the uri and display it on the returned page

SockJS
======

A simple example demonstrating SockJS connections from a browser. The example serves a simple page which has some JavaScript in it
to create a SockJS connection to a server, and send and receive data from it.

To run the server:

vertx deploy -main org.vertx.java.examples.sockjs.SockJSExample -cp classes

Then point your browser at: http://localhost:8080









