vert.x Ruby Examples
====================

Prerequisites:

1) The bin directory from the distro must be on your PATH - this should have been done as part of the install procedure.

2) JRuby must be installed and the JRUBY_HOME environment variable should be pointing at the root of your JRUBY installation.

3) JDK/JRE 1.7.0+ must be installed and the JDK/JRE bin directory must be on your PATH

(The instructions below use the `vertx run` command to start each vertx application in its own vert.x instance, alternatively
you can run vertx is application server mode. See the wiki for more information).

4) Run an example:

(for full help on deploying just type vertx from the command line)

(from this directory)

vertx run -ruby -main <example script name> -cp .

where <example script name> is, for example, echo/echo_server.rb

There now follows a description of all the available examples:

Echo Server + Client
====================

A simple echo server which echos back any sent to it

To run the server:

vertx run -ruby -main echo/echo_server.rb -cp .

Then either telnet localhost 1234 and notice how text entered via telnet is echoed back

Instead of telnet you can also run a simple echo client in a different console:

vertx run -ruby -main echo/echo_client.rb -cp .

Fanout Server
=============

Fans out all data received on any one connection to all other connections.

To run the server:

vertx run -ruby -main fanout/fanout_server.rb -cp .

Then telnet localhost 1234 from different consoles. Note how data entered in telnet is echoed to all connected connections

HTTP
====

A simple HTTP server which just returns some hard-coded HTML to the client, and a simple HTTP client which sends a GET
request and displays the response it receives.

To run the server:

vertx run -ruby -main http/http_server.rb -cp .

Then point your browser at http://localhost:8080

Alternatively, you can also run the HTTP client from a different console:

vertx run -ruby -main http/http_client.rb -cp .

HTTPS
=====

Like the HTTP example, but using HTTPS

To run the server:

vertx run -ruby -main https/https_server.rb -cp .

Then point your browser at http://localhost:4443

Alternatively, you can also run the HTTPS client from a different console:

vertx run -ruby -main https/https_client.rb -cp .

You'll get a warning from your browser since the server certificate the server is using is not known to it, that's
normal.

Proxy
=====

A very simple HTTP proxy which simply proxies requests/response from a client to a server and back again.
Run each part in its own console:

It includes

a) A simple http server which just takes the request and sends back a response in 10 chunks

b) A simple http client which sends a http request with 10 chunks (via the proxy server), and displays any
response it receives

c) A proxy server which simply sits in the middle proxying requests and responses between client and server

Run the http server:

vertx run -ruby -main proxy/http_server.rb -cp .

Run the proxy server:

vertx run -ruby -main proxy/proxy_server.rb -cp .

Run the http client:

vertx run -ruby -main proxy/http_client.rb -cp .

PubSub
======

A very simple publish-subscribe server.

Connections can subscribe to topics and unsubscribe from topics. Topics can be any arbitrary string.

When subscribed, connections will receive any messages published to any of the topics it is subscribed to.

The pub-sub server understands the following simple text protocol. Each line is terminated by CR (hit enter on telnet)

To subscribe to a topic:

SUBSCRIBE,<topic_name>

To unsubscribe from a topic:

UNSUBSCRIBE,<topic_name>

To publish a message to a topic:

PUBLISH,<topic_name>,<message>

Where:

<topic_name> is the name of a topic

<message is some string you want to publish

To run the server:

vertx run -ruby -main pubsub/pubsub_server.rb -cp .

Then open some more consoles and telnet localhost 1234, and experiment with the protocol.

SendFile
========

Simple web server that uses sendfile to serve content directly from disk to the socket bypassing user space. This is a
very efficient way of serving static files from disk.

The example contains three static pages: index.html, page1.html and page2.html which are all served using sendfile.

To run the server:

vertx run -ruby -main sendfile/sendfile.rb -cp .

Then point your browser at http://localhost:8080 and click around

SSL
===

This is like the echo example, but this time using SSL.

To run the server:

vertx run -ruby -main ssl/ssl_server.rb -cp .

To run the client in a different console:

vertx run -ruby -main ssl/ssl_client.rb -cp .

Upload
======

A simple upload server example. The client streams a file from disk to an HTTP request and the server reads the
HTTP request and streams the data to a file on disk.

To run the server:

vertx run -ruby -main upload/upload_server.rb -cp .

To run the client in a different console:

vertx run -ruby -main upload/upload_client.rb -cp .

Websockets
==========

A simple example demonstrating HTML 5 websockets. The example serves a simple page which has some JavaScript in it
to create a websocket to a server, and send and receive data from it.

To run the server:

vertx run -ruby -main websockets/websockets.rb -cp .

Then point your browser at: http://localhost:8080

Redis
=====

This example demonstrates a simple HTTP server which responds to HTTP requests to '/' with a page containing a hit counter.
The count is stored in a Redis Server and incremented each time using the Redis INCR command.

To run this example you must have a Redis server running on localhost.

The, to run the example:

vertx run -ruby -main redis/redis_example.rb -cp .

Then point your browser at: http://localhost:8080 and hit refresh a few times

Route Match
===========

This example shows how a route matcher can be used with a vert.x HTTP server to allow REST-style resource based matching of URIS
in the manner of express (JS) or Sinatra.

To run the example:

vertx run -ruby -main route_match/route_match_example.rb -cp .

Then point your browser at: http://localhost:8080.

An index page will be served which contains some links to urls of the form:

/details/<user>/<id>

The server will extract the user and id from the uri and display it on the returned page

SockJS
======

A simple example demonstrating SockJS connections from a browser. The example serves a simple page which has some JavaScript in it
to create a SockJS connection to a server, and send and receive data from it.

To run the server:

vertx run -ruby -main sockjs/sockjs.rb -cp .

Then point your browser at: http://localhost:8080

Eventbus Bridge
===============

This example shows how the vert.x event bus can extend to client side JavaScript.

To run the server:

vertx run -ruby -main eventbusbridge/bridge_server.rb -cp .

The example shows a simple publish / subscribe client side JavaScript application that uses the vert.x event bus.

Using the application you can subscribe to one or more "addresses", then send messages to those addresses.

To run it, open one or more browsers and point them to http://localhost:8080.

Try subscribing and sending messages and see how the separate browsers can interoperate on the event bus.






